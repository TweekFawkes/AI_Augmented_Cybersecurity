# Cursor + Repomix Integration Rules

## Repomix Workflow Integration
- When analyzing large codebases, always suggest using Repomix to create an AI-friendly package
- For feature requests spanning multiple files, recommend generating a fresh Repomix package first
- When debugging complex issues, use Repomix to provide complete context to AI assistants
- For architecture reviews, use the Repomix XML output to get comprehensive system understanding

## Backend Development with Repomix
- Before major refactoring, generate a Repomix package for full context
- Use component-specific Repomix packages for focused analysis (services, routers, schemas)
- Include Repomix packages in code review processes for better context
- Generate fresh packages after significant changes for up-to-date analysis

## FastAPI Backend Repomix Commands
```bash
# Full backend package
cd redacted_backend_fastapi && uv run repomix --verbose

# Services only
cd redacted_backend_fastapi && uv run repomix app/services --include "**/*.py" -o services_only.xml

# API layer only
cd redacted_backend_fastapi && uv run repomix app/routers app/schemas --include "**/*.py" -o api_layer.xml

# Core architecture
cd redacted_backend_fastapi && uv run repomix app/core app/main.py --include "**/*.py" -o core_arch.xml
```

## AI-Assisted Development Patterns
- Always provide Repomix packages when asking for architectural advice
- Use token counts from Repomix to optimize AI interactions (70,787 tokens for full backend)
- Leverage the security filtering to safely share code with AI tools
- Use line numbers from Repomix for precise code referencing

## Cursor Chat Prompts for Repomix
### Architecture Analysis
"Analyze this FastAPI backend from Repomix package [attach XML]. Focus on service layer organization, authentication patterns, and API structure."

### Feature Development
"Based on this Repomix package, help me implement [feature] following existing patterns and architecture."

### Code Review
"Review this codebase package for security, performance, and best practices. Suggest specific improvements with file and line references."

### Debugging
"Help me trace this issue [description] through the codebase. Use the Repomix package for complete context."

## Automation Opportunities
- Set up pre-commit hooks to auto-generate Repomix packages
- Create CI/CD tasks for automated documentation using Repomix
- Use Repomix packages for automated code quality analysis
- Generate component-specific packages for microservice development

## Token Management
- Full backend: ~70K tokens (suitable for Claude-3.5-Sonnet)
- Use component packages for smaller contexts
- Compress packages when approaching token limits
- Monitor token usage for cost optimization