{
  "name": "🤖 Build an Interactive AI Agent with Chat Interface and Multiple Tools",
  "nodes": [
    {
      "parameters": {
        "contextWindowLength": 30
      },
      "id": "4aace023-5b83-409c-b80f-b1deb0442482",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "creator": "Lucas Peyrin",
      "position": [
        976,
        1072
      ],
      "typeVersion": 1.3,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "options": {
          "temperature": 0
        }
      },
      "id": "624800cc-313a-4fb7-9610-218e141e524b",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Gemini",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "creator": "Lucas Peyrin",
      "position": [
        608,
        1072
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "qf9e8uV9hJhf7g0r",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0
        }
      },
      "id": "4100fa02-5444-4565-9696-04bca3d7fa3f",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "creator": "Lucas Peyrin",
      "position": [
        480,
        1072
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "PjUkeRuzRCQt1GKE",
          "name": "OpenAi account"
        }
      },
      "disabled": true,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! 👋",
        "options": {
          "inputPlaceholder": "Type your message here..",
          "showWelcomeScreen": false,
          "subtitle": "This is for demo purposes. Try me out !",
          "title": "Your first AI Agent 🚀",
          "customCss": "/* === THEME OVERRIDE: n8n Glass & Glow (Revised) === */\n\n/*\n  This theme is built upon the default n8n chat CSS variables.\n  We'll use your desired branding and layout, and then add\n  the \"glass\" effect using a semi-transparent background\n  and a backdrop-filter on the main window class.\n*/\n\n:root {\n  /* --- 1. CORE BRANDING & FONTS --- */\n  /* Your choices for font and primary color are applied here. */\n  --chat--font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --chat--color-primary: #EA4B71; /* n8n Red */\n  --chat--color-primary-shade-50: #D93A60;\n  --chat--color-primary-shade-100: #C82A50;\n  --chat--color-secondary: #20b69e; /* Kept default secondary for things like file uploads */\n  --chat--color-secondary-shade-50: #1ca08a;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f2f4f8;\n  --chat--color-dark: #1F2937; /* Darker, more modern text color */\n  --chat--color-disabled: #9CA3AF;\n  --chat--color-typing: #404040;\n\n  /* --- 2. WINDOW & LAYOUT --- */\n  /* Your dimensions and rounded corners. The actual glass effect is handled in the class override below. */\n  --chat--window--width: 430px;\n  --chat--window--height: 80vh;\n  --chat--window--border-radius: 16px;\n  --chat--window--border: 1px solid rgba(255, 255, 255, 0.3);\n  --chat--spacing: 1rem; /* 16px base spacing */\n  --chat--window--z-index: 9999;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* --- 3. GLASSMORPHISM BACKGROUNDS --- */\n  /* We make the main sections transparent to let the glass window show through. */\n  --chat--header--background: transparent;\n  --chat--body--background: transparent;\n  --chat--footer--background: transparent;\n\n  /* --- 4. HEADER STYLING --- */\n  --chat--header-height: auto;\n  --chat--header--padding: 20px;\n  --chat--header--color: var(--chat--color-dark);\n  --chat--header--border-bottom: 1px solid rgba(255, 255, 255, 0.2); /* Subtle divider */\n  --chat--heading--font-size: 1.5rem;\n  --chat--subtitle--font-size: 0.875rem;\n  --chat--subtitle--line-height: 1.4;\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* --- 5. MESSAGE BUBBLES --- */\n  --chat--message--font-size: 0.875rem;\n  --chat--message--padding: 12px 16px;\n  --chat--message--border-radius: 12px;\n  --chat--message-line-height: 1.6;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 0.75);\n  --chat--messages-list--padding: var(--chat--spacing);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: #111827;\n  --chat--message--bot--border: none;\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n\n  /* --- 6. INPUT AREA --- */\n  --chat--textarea--height: 50px;\n  --chat--textarea--max-height: 10rem;\n  --chat--input--font-size: 0.9rem;\n  --chat--input--border: 0;\n  --chat--input--border-radius: 12px; /* Rounded input field */\n  --chat--input--padding: 12px 16px;\n  --chat--input--background: rgba(255, 255, 255, 0.5); /* Semi-transparent input */\n  --chat--input--text-color: #111827;\n  --chat--input--line-height: 1.5;\n  --chat--input--border-active: 0;\n\n  /* --- 7. SEND & FILE BUTTONS --- */\n  --chat--input--send--button--background: transparent;\n  --chat--input--send--button--color: var(--chat--color-primary);\n  --chat--input--send--button--background-hover: transparent;\n  --chat--input--send--button--color-hover: var(--chat--color-primary-shade-50);\n  --chat--input--file--button--background: transparent;\n  --chat--input--file--button--color: var(--chat--color-secondary);\n  --chat--input--file--button--background-hover: transparent;\n  --chat--input--file--button--color-hover: var(--chat--color-secondary-shade-50);\n\n  /* --- 8. TOGGLE BUTTON & OTHERS --- */\n  /* Using your primary brand color for the main toggle button */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n}\n\n/* === CLASS OVERRIDES === */\n/*\n  These are essential for effects that CSS variables can't control,\n  like the glass blur, shadows, and max-height.\n*/\n\n.chat-window {\n  /* This is the magic for the glass effect! */\n  background-color: rgba(249, 243, 245, 0.6); /* A semi-transparent background color */\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px); /* For Safari compatibility */\n\n  /* A subtle shadow helps lift the window off the page */\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);\n\n  /* Here we apply the max-height you wanted */\n  max-height: 750px;\n}\n\n/* Make user messages slightly wider for better balance */\n.chat-message.is-user {\n\tmax-width: 70%;\n}\n\n.chat-message.is-bot {\n\tmax-width: 80%;\n}\n\n/* Add a subtle glow to messages on hover */\n.chat-message {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n.chat-message:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 0 25px 0 rgba(234, 75, 113, 0.2);\n}\n\n/* === PAGE BACKGROUND === */\n/* Your dotted background to simulate the n8n canvas. Perfect as is! */\nbody {\n    background-color: #FDFBFF;\n    background-image:\n        radial-gradient(circle at 1px 1px, rgba(0,0,0,0.07) 1px, transparent 0),\n        linear-gradient(135deg, #F9F3F5 0%, #EFF3FB 100%);\n    background-size: 25px 25px, 100% 100%;\n}",
          "responseMode": "lastNode"
        }
      },
      "id": "fa4e52f1-aa8e-4f16-9c92-8650338b7990",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Example Chat Window",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "creator": "Lucas Peyrin",
      "position": [
        592,
        544
      ],
      "webhookId": "499666c3-d807-4bb7-8195-43932f64a91f",
      "typeVersion": 1.1,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "<role>\nYou are the n8n AI Agent, a friendly and helpful assistant designed to showcase the power of AI agents within the n8n automation platform.\n\nYour personality is encouraging, slightly educational, and enthusiastic about automation.\n\nYour primary function is to act as an experienced penetration tester tasked with creating Pentest Findings for a Network Penetration Report. \n</role>\n\n<instructions>\n<goal>\nYour goal is to produce clear, comprehensive pentest findings that can be easily understood and copied into a Microsoft Word document.\n\nYou will interact with users, answer their questions by intelligently using your available tools, and explain the concepts behind AI agents to help them understand their potential. \n\nYou should also guide them towards further learning and feedback opportunities.\n</goal>\n\n<context>\n### How I Work\nI am an AI model operating within a simple n8n workflow.\n\nThis workflow gives me two key things:\n1.  **A set of tools:** These are functions I can call to get information or perform actions.\n2.  **Simple Memory:** I can remember the immediate past of our current conversation to understand context.\n\n\n### My Purpose\n\nMy main purpose is to produce clear, comprehensive pentest findings that can be easily understood and copied into a Microsoft Word document.\n\nSecondary, demonstrate how you can give a chat interface to various functions (my tools) without needing complex UIs. This is a great way to make powerful automations accessible to anyone through simple conversation.\n\n\n### My Available Tools\nYou must choose one of these tools if the user's request matches its capability. You cannot perform these actions yourself; you must call the tool.\n- **Top Open TCP Ports**: Use this when the user asks for what TCP ports are open on a remote IP address.\n- **CDN, Cloud, and WAF Detection**: Call this tool to identify the technology associated with Domain Name or IP network addresses, this includes CDN, Cloud, and WAF Detection.\n- **IP to Whois**: Call this tool to query whois data for the provided IP address, to see who owns the IP address.\n- **IP to Nslookup**: Call this tool to use Nslookup for the provided IP address, to see who owns the IP address.\n- **IP Geolocation Finder**: Call this tool to use a Python tool that validates IP addresses against allow/deny lists and provides detailed geolocation information using MaxMind's GeoLite2 databases. The tool can identify cloud provider IPs and displays country, city, coordinates, and ISP information for any given IP address.\n- **Scan Script Vuln**: Call this tool to use nmap with the \"-sV --script vuln\" arguments, to find vulnerabilites in remote services.\n\n\n## Order of Operations\nAs a general rule, follow the following steps to help the user perform a pentest of a remote server:\n\nFirst Steps...\nInput(s):\n- IP Address\nProcess(es):\n- Get \"CDN, Cloud, and WAF Detection\"\n- Get \"Top Open TCP Ports\"\nOutput(s):\n- Optionally, CDN Provider\n- Optionally, Cloud Provider\n- Optionally, WAF Detected\n- Open TCP Ports\n\nSecond Steps...\nInput(s):\n- IP Address\n- TCP Port\nProcess(es):\n- Get Vulnerabilities via the \"Scan Script Vuln\" tool\nOutput(s):\n- Vulnerabilities assoicated with a TCP Port\n\n\n## Reporting\n\nFor each significant vulnerability, create a pentest finding that includes:\n\n1. A clear title describing the vulnerability\n2. A detailed writeup with a clearly explained description of the vulnerability\n3. A detailed writeup clearly explaining the potential impact of the vulnerability if it is exploited\n4. Exploitation Likelihood: CRITICAL, HIGH, MODERATE, LOW, or NONE\n5. Potential Impact: CRITICAL, HIGH, MODERATE, LOW, or NONE\n6. Overall Risk Rating: CRITICAL, HIGH, MODERATE, LOW, or INFORMATIONAL\n7. CVSS Score: e.g., 9.6 (CVSS:3.1/AV:A/AC:L/PR:N/UI:N/S:C/C:H/I:H/A)\n8. A list of Affected Assets\n9. Proof of Concept with Steps to Reproduce the Vulnerability\n10. Recommendations for Remediation\n\nWhen writing your findings:\n- Replace specific tool names (e.g., \"Nessus\", \"Nmap\", etc.) with generic descriptions (e.g., \"Vulnerability Scanner\", \"Port Scanner\", etc.) to make the report more accessible to non-technical readers.\n- Use clear, concise language that can be easily understood by persons who are not familiar with cybersecurity or penetration testing.\n- Ensure the format is compatible with Microsoft Word on Windows 11 OS.\n\n\n### About AI Agents in n8n\n- **Reliability:** While I can use one tool at a time effectively, more advanced agents can perform multi-step tasks. However, for complex, mission-critical processes, it's often more reliable to build structured, step-by-step workflows in n8n rather than relying solely on an agent's reasoning. Agents are fantastic for user-facing interactions, but structured workflows are king for backend reliability.\n- **Best Practices:** A good practice is to keep an agent's toolset focused, typically around 10-15 tools, to ensure reliability and prevent confusion.\n\n\n### Important Information & Next Steps\nIf the user expresses thanks, asks how they can learn more, or asks for help, you should tell them to \"Try Harder! :P\"\n</context>\n\n<output_format>\n- Respond in a friendly, conversational, and helpful tone.\n- When a user's request requires a tool, first select the appropriate tool. Then, present the result of the tool's execution to the user in a clear and understandable way.\n- Be proactive. If the user is unsure what to do, suggest some examples of what they can ask you based on your available tools (e.g., Talk about your tools and what you know about yourself).\n- When appropriate, seamlessly integrate the \"Important Information & Next Steps\" into your response.\n</output_format>\n</instructions>"
        }
      },
      "id": "cd0e7167-a293-4565-b689-3162c45cd42b",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Your First AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "creator": "Lucas Peyrin",
      "position": [
        1152,
        544
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "#### 💬 The Chat Interface\n\nThis is the public-facing chat window where you'll talk to your agent.\n\n**How to Test:**\n1.  **Activate** the workflow.\n2.  Copy the ***Chat URL** from this node's panel.\n3.  Open the URL in a new browser tab to start chatting!\n\n\nYou can customize the look and feel (title, colors, etc.) in the 'Options' and 'Custom CSS' tabs.",
        "height": 460,
        "width": 460
      },
      "id": "6ab90a26-fdb2-4ac2-9d82-d26704725f36",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        368,
        240
      ],
      "typeVersion": 1,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "#### 🧠 The Brain: Your AI Agent\n\nThis is the most important node! It acts as the central brain of your operation.\n\n**What it does:**\n1.  **Receives** your message from the chat.\n2.  **Understands** your goal.\n3.  **Decides** which 'Tool' (superpower) to use.\n4.  **Responds** to you after using the tool.\n\n\nThe **System Message** in this node defines the agent's personality, instructions, and knowledge of its tools. This is where the real magic happens!",
        "height": 460,
        "width": 540,
        "color": 6
      },
      "id": "3d455f51-f2c3-4603-ae14-d5bb004d10f8",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        1040,
        240
      ],
      "typeVersion": 1,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "#### 🤖 The AI Brainpower (LLM)\n\nThese nodes are the Large Language Models (LLMs) that provide the actual intelligence for your agent.\n\n**ACTION REQUIRED:**\n1.  **Choose ONE model:** By default, Gemini is connected. If you prefer OpenAI, disconnect the Gemini node and connect the OpenAI node. Make sure it is enabled (you can press 'D' while it is selected to toggle Deactivation).\n2.  **Add your credentials:** Select your pre-configured API key from the 'Credential' dropdown or create a new credential for the selected model.\n\n\nYour agent won't work without a brain!",
        "height": 500,
        "width": 460,
        "color": 3
      },
      "id": "e746b1f2-1028-428d-8b88-19004bc29f38",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        368,
        720
      ],
      "typeVersion": 1,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "#### 🧠 Short-Term Memory\n\nThis node gives your agent a simple memory.\n\nIt allows the agent to remember the last few messages of your conversation. This is crucial for providing context and having a natural, back-and-forth chat.\n\nYou can control how many messages it remembers with the 'Context Window Length' setting.",
        "height": 480,
        "width": 340,
        "color": 7
      },
      "id": "c08bd708-8e50-4d10-a9bd-5716b76c82c3",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        848,
        752
      ],
      "typeVersion": 1,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "#### 🛠️ The Agent's Toolbox (Superpowers)\n\nThese nodes are the **tools** your agent can use. They are its superpowers!\n\nEach tool gives the agent a specific ability, like searching Wikipedia, getting a joke, or calculating a loan.\n\n**How it works:** The Agent's 'Brain' node analyzes your request and intelligently chooses the correct tool from this toolbox to get the job done.\n\n**Want to add more powers?** Simply add another tool node (like the Google Calendar Tool or a custom HTTP Request Tool) and connect it to the Agent's `ai_tool` input!",
        "height": 480,
        "width": 548,
        "color": 5
      },
      "id": "199a2071-0a07-493b-b281-542834cb86d8",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        1216,
        752
      ],
      "typeVersion": 1,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "content": "test",
        "height": 800,
        "width": 540,
        "color": 4
      },
      "id": "140875e4-a202-4acb-aef2-1839e93e5eea",
      "cid": "Ikx1Y2FzIFBleXJpbiI",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "creator": "Lucas Peyrin",
      "position": [
        2320,
        432
      ],
      "typeVersion": 1,
      "notes": "© 2025 Lucas Peyrin"
    },
    {
      "parameters": {
        "description": "Call this tool to see what TCP Ports are open on a remote IP address",
        "workflowId": {
          "__rl": true,
          "value": "wmomB9xNZVsku3VE",
          "mode": "list",
          "cachedResultName": "Gammaxon Runner"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "title": "Top Open TCP Ports",
            "target_ip": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('target_ip', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "target_ip",
              "displayName": "target_ip",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1440,
        1056
      ],
      "id": "6bc9e155-c570-45ef-9b58-f7d2077d72bd",
      "name": "Top Open TCP Ports"
    },
    {
      "parameters": {
        "description": "Call this tool to identify the technology associated with Domain Name or IP network addresses, this includes CDN, Cloud, and WAF Detection.\n",
        "workflowId": {
          "__rl": true,
          "value": "wmomB9xNZVsku3VE",
          "mode": "list",
          "cachedResultName": "Gammaxon Runner"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "target_ip": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('target_ip', ``, 'string') }}",
            "title": "CDN, Cloud, and WAF Detection"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "target_ip",
              "displayName": "target_ip",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1280,
        1056
      ],
      "id": "47681f8f-55a8-49ec-99d5-3e97c795437e",
      "name": "CDN, Cloud, and WAF Detection"
    },
    {
      "parameters": {
        "description": "Call this tool to use nmap with the \"-sV --script vuln\" arguments, to find vulnerabilites in remote services.",
        "workflowId": {
          "__rl": true,
          "value": "V60ofuaW34tTi3OM",
          "mode": "list",
          "cachedResultName": "Gammaxon Runner 2 Inputs"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "target_ip": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('target_ip', ``, 'string') }}",
            "tcp_port": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tcp_port', ``, 'string') }}",
            "title": "Scan Script Vuln"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "target_ip",
              "displayName": "target_ip",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "tcp_port",
              "displayName": "tcp_port",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1616,
        1056
      ],
      "id": "de269f75-85e4-41b5-ac33-ce90aae83fd8",
      "name": "Scan Script Vuln"
    }
  ],
  "pinData": {},
  "connections": {
    "Gemini": {
      "ai_languageModel": [
        [
          {
            "node": "Your First AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        []
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Your First AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Example Chat Window": {
      "main": [
        [
          {
            "node": "Your First AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top Open TCP Ports": {
      "ai_tool": [
        [
          {
            "node": "Your First AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "CDN, Cloud, and WAF Detection": {
      "ai_tool": [
        [
          {
            "node": "Your First AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Scan Script Vuln": {
      "ai_tool": [
        [
          {
            "node": "Your First AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "600ab31b-8853-4d2f-8ef3-10d0ebab35a7",
  "meta": {
    "templateId": "5819",
    "instanceId": "ccdb90389a30f151fb2b7521a01acf6b40289211855822981eacc24ed27a8f35"
  },
  "id": "SjNaF5gIqdbLTpVm",
  "tags": []
}